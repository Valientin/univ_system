#!/usr/bin/env node

const model = require('../../models');

async function createAdmins() {
    const allAdmins = await model.User.count({ where: { roleName: 'admin' } });

    if (allAdmins == 0) {
        const user = await model.User.create({
            firstName: 'test',
            lastName: 'test',
            loginName: 'admin',
            roleName: 'admin',
            email: 'test@mail.ru',
            middleName: 'test',
            birthday: new Date(),
            status: 'offline'
        });

        await user.setPassword('poosib');
    }
}

async function createMainData() {
    const allFaculties = await model.Faculty.count({ where: {} });
    const allLearnForms = await model.LearnForm.count({ where: {} });

    if (allFaculties == 0 && allLearnForms == 0) {
        const faculty = await model.Faculty.create({
            name: 'test'
        });

        const cathedra = await model.Cathedra.create({
            name: 'test',
            facultyId: faculty.id
        });

        const group = await model.Group.create({
            name: 'test',
            cathedraId: cathedra.id,
            numberOfSemesters: 2
        });

        const learnForm = await model.LearnForm.create({
            needPay: false,
            price: 0,
            name: 'test'
        });

        const user = await model.User.create({
            firstName: 'test',
            lastName: 'test',
            loginName: 'student',
            roleName: 'student',
            email: 'student@mail.ru',
            middleName: 'test',
            birthday: new Date(),
            status: 'offline'
        });

        await user.setPassword('poosib');

        await model.Student.create({
            userId: user.id,
            groupId: group.id,
            learnFormId: learnForm.id
        });
    }
}

(async() => {
    await model.sequelize.authenticate();
    await model.sequelize.sync({ force: false });

    await createAdmins();
    await createMainData();

    process.exit(0);
})(function(e) {
    if (e) {
        logger.error(e);
        throw e;
    }
});
