#!/usr/bin/env node

const model = require('../../models');
const faker = require('faker');

async function createAdmins() {
    for (let i = 0; i < 1; i++) {
        const user = await model.User.create({
            firstName: faker.name.firstName(),
            lastName: faker.name.lastName(),
            loginName: i == 0 ? 'admin' : `admin${i}`,
            roleName: 'admin',
            email: `admin${i}@mail.ru`,
            middleName: faker.name.firstName(),
            birthday: new Date(),
            status: 'offline'
        });

        await user.setPassword('poosib');
    }
}

async function createMainData() {
    for (let i = 0; i < 1; i++) {
        const suffix = i > 0 ? `_${i}` : '';

        const faculty = await model.Faculty.create({
            name: faker.company.companyName() + suffix
        });

        for (let j = 0; j < 1; j++) {
            const cathedra = await model.Cathedra.create({
                name: faker.company.companyName() + suffix + `-${j}`,
                facultyId: faculty.id
            });

            for (let l = 0; l < 1; l++) {
                const userT = await model.User.create({
                    firstName: faker.name.firstName(),
                    lastName: faker.name.lastName(),
                    loginName: `teacher${l}${j}${i}`,
                    roleName: 'teacher',
                    email: `teacher${l}${j}${i}@mail.ru`,
                    middleName: faker.name.firstName(),
                    birthday: new Date(),
                    status: 'offline'
                });

                await userT.setPassword('poosib');

                await model.Teacher.create({
                    userId: userT.id,
                    cathedraId: cathedra.id
                });
            }

            const learnForm = await model.LearnForm.create({
                needPay: faker.random.boolean(),
                price: faker.random.number(10000),
                name: faker.company.companyName() + suffix + `-${j}`
            });

            for (let k = 0; k < 1; k++) {
                const group = await model.Group.create({
                    name: faker.company.companyName() + suffix + `-${j}` + `-${k}`,
                    cathedraId: cathedra.id,
                    numberOfSemesters: faker.random.number(10)
                });

                for (let m = 0; m < 1; m++) {
                    const user = await model.User.create({
                        firstName: faker.name.firstName(),
                        lastName: faker.name.lastName(),
                        loginName: `student${m}${k}${j}${i}`,
                        roleName: 'student',
                        email: `student${m}${k}${j}${i}@mail.ru`,
                        middleName: faker.name.firstName(),
                        birthday: new Date(),
                        status: 'offline'
                    });

                    await user.setPassword('poosib');

                    await model.Student.create({
                        userId: user.id,
                        groupId: group.id,
                        learnFormId: learnForm.id
                    });
                }
            }
        }
    }
}

async function createTestsData() {
    const teacher = await model.Teacher.findOne({
        where: {
            id: 1
        }
    });

    if (teacher) {
        const lesson = await model.Lesson.create({
            name: 'test',
            teacherId: teacher.id,
            semester: 1
        });

        const test = await model.Test.create({
            name: 'test',
            description: 'desc',
            maxAttempts: 5,
            questions: 3,
            active: false,
            lessonId: lesson.id
        });

        for (let i = 0; i < 5; i++) {
            const testQuestion = await model.TestQuestion.create({
                question: `question - ${i}`,
                type: 'single',
                testId: test.id
            });

            for (let j = 0; j < 3; j++) {
                const testQuestionOption = await model.TestQuestionOption.create({
                    text: `question - ${i}, answer - ${j}`,
                    correctAnswer: j == 0,
                    testQuestionId: testQuestion.id
                });
            }
        }
    }
};

(async() => {
    await model.sequelize.authenticate();
    await model.sequelize.sync({ force: true });

    await createAdmins();
    await createMainData();
    await createTestsData();

    process.exit(0);
})(function(e) {
    if (e) {
        logger.error(e);
        throw e;
    }
});
